classType SystemLib.Transferfunction.Integrator.IntegratorT
blockdiagramSpecification Main {
	methodBody compute {
		outPin active {
			connection_4
		}
	}
	methodBody value {
		outPin {
			connection_1
		}
	}
	methodBody reset {
		outPin {
			connection_11
		}
	}
	methodArgumentIdentifier reset.initValue at  (41, 75) {
		label at (0, -1)
		outPin {
			connection_12
		}
		sequenceCall at (-40, -24) {
			inPin
		}
	}
	simpleIdentifier memory at  (191, 75) {
		label at (0, -1)
		inPin connection_12 {
			bendpoints (10, 0), (10, 0)
		}
		outPin {
			connection_10
		}
		sequenceCall at (0, -14) {
			inPin connection_11
		}
	}
	return at  (361, 75) {
		label at (0, 0)
		inPin connection_10 {
			bendpoints (10, 0), (10, 0)
		}
		sequenceCall at (10, -14) {
			inPin connection_1
		}
	}
	simpleIdentifier SystemLib.Miscellaneous.DeltaTimeService.deltaT at  (31, 185) {
		label at (10, -1)
		inPin outPin {
			connection_2
		}
		sequenceCall at (-10, -14) {
			inPin
		}
	}
	simpleIdentifier memory at (411, 225) {
		label at (0, -1)
		inPin connection_5 {
			bendpoints (30, 0)
		}
		outPin {
			connection_3
		}
		sequenceCall at (-10, -14) {
			inPin connection_4
		}
	}
	division at  (131, 186) size (2, 5) {
		inPin connection_2 inPin connection_8 {
			bendpoints 
		(50, 0)
		}
		outPin {
			connection_7
		}
	}
	multiplication at  (211, 206) {
		inPin connection_7 inPin connection_9 {
			bendpoints 
		(120, 0), (120, -60)
		}
		outPin {
			connection_6
		}
	}
	addition at (301, 216) {
		inPin connection_6 inPin connection_3 {
			bendpoints (40, 0), (40, 60), 
		(-170, 60), (-170, 10)
		}
		outPin {
			connection_5
		}
	}
	methodArgumentIdentifier compute.T at  (41, 225) {
		label at 
		(0, -1)
		outPin {
			connection_8
		}
		sequenceCall at (-50, -24) {
			inPin
		}
	}
	methodArgumentIdentifier compute.val at  (41, 285) {
		label at 
		(0, -1)
		outPin {
			connection_9
		}
		sequenceCall at (-50, -24) {
			inPin
		}
	}
}